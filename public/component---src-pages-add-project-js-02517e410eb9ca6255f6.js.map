{"version":3,"sources":["webpack:///./src/components/AddProject.js","webpack:///./src/apollo/gql/projects.js","webpack:///./src/pages/add-project.js"],"names":["AddProject","props","useForm","handleSubmit","register","errors","as","onSubmit","values","console","log","JSON","stringify","addProject","htmlFor","ref","validate","value","name","mb","rows","gql","AddProjectPage","useQuery","FETCH_PROJECTS","loading","data","error","subscribeToMore","useMutation","ADD_PROJECT_SIMPLE","addProjectSimple","ADD_PROJECT","sx","width","title","a","variables","description","refetchQueries","query","project","image"],"mappings":"ySA2EeA,EAzDI,SAAAC,GAAU,IAAD,IACiBC,cAAnCC,EADkB,EAClBA,aAAcC,EADI,EACJA,SADI,EACMC,OAMhC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,GAAG,MAAZ,qBAEA,YAAC,IAAD,CAAKA,GAAG,OAAOC,SAAUJ,GATZ,SAAAK,GACfC,QAAQC,IAAR,YAAwBC,KAAKC,UAAUJ,EAAQ,KAAM,IACrDP,EAAMY,WAAWL,OAQb,YAAC,IAAD,CAAOM,QAAQ,SAAf,UACA,YAAC,IAAD,CACEC,IAAKX,EAAS,CACZY,SAAU,SAAAC,GAAK,MAAc,UAAVA,GAAqB,eAE1CC,KAAK,QACLC,GAAI,IAGN,YAAC,IAAD,CAAOL,QAAQ,eAAf,WACA,YAAC,MAAD,GACEI,KAAK,cACLE,KAAK,IACLD,GAAI,EACJJ,IAAKX,EAAS,CACZY,SAAU,SAAAC,GAAK,MAAc,UAAVA,GAAqB,iBAL5C,KAOO,cAPP,IA8BA,YAAC,IAAD,kB,8nBClEeI,IAAH,KAOAA,IAAH,KASUA,IAAH,K,yHCqETC,UAjEQ,WAAO,IAAD,EACuBC,iBAASC,GAAnDC,EADmB,EACnBA,QAAgBC,GADG,EACVC,MADU,EACHD,MADG,KACGE,gBAGAC,iBAAYC,IAAnCC,EAJoB,aAKHF,iBAAYG,IALT,UAO3B,OAAIP,IAAYC,EACP,0CAIP,kBAAC,IAAD,KACE,yBACEO,GAAI,CAIFC,MAAO,CAAC,OAAQ,MAAO,SAGzB,kBAAC,IAAD,CAAKC,MAAM,SACX,kBAAC,IAAD,CAAS7B,GAAG,MAAZ,UACA,kBAAC,IAAD,CAASA,GAAG,MAAZ,wBACA,6BACA,6BACA,kBAAC,IAAD,CAAM4B,MAAO,CAAC,IAAK,KAAM,MACvB,kBAAC,EAAD,CACErB,WAAU,e,EAAA,G,EAAA,UAAE,WAAML,GAAN,eAAA4B,EAAA,sEAIYL,EAAiB,CACrCM,UAAW,CACTF,MAAO3B,EAAO2B,MACdG,YAAa9B,EAAO8B,aAEtBC,eAAgB,CAAC,CAAEC,WAAOhB,MATlB,OAIJiB,EAJI,OAWVhC,QAAQC,IAAR,eAA2BC,KAAKC,UAAU6B,EAAS,KAAM,IAX/C,0C,+KAAF,wDAeZ,kBAAC,IAAD,CACEvB,KAAK,aACLwB,MAAM,iHAER,kBAAC,IAAD,CACExB,KAAK,aACLwB,MAAM,iHAER,kBAAC,IAAD,CACExB,KAAK,WACLwB,MAAM,+EAER,kBAAC,IAAD,CACExB,KAAK,cACLwB,MAAM","file":"component---src-pages-add-project-js-02517e410eb9ca6255f6.js","sourcesContent":["import React from 'react'\n/** @jsx jsx */\nimport {\n  jsx,\n  Box,\n  Label,\n  Input,\n  Checkbox,\n  Select,\n  Textarea,\n  Flex,\n  Radio,\n  Slider,\n  Button,\n  Heading\n} from 'theme-ui'\nimport { useForm } from 'react-hook-form'\n\nconst AddProject = props => {\n  const { handleSubmit, register, errors } = useForm()\n  const onSubmit = values => {\n    console.log(`values : ${JSON.stringify(values, null, 2)}`)\n    props.addProject(values)\n  }\n\n  return (\n    <Box>\n      <Heading as='h3'>Add a new project</Heading>\n\n      <Box as='form' onSubmit={handleSubmit(onSubmit)}>\n        <Label htmlFor='title'>Title:</Label>\n        <Input\n          ref={register({\n            validate: value => value !== 'admin' || 'Nice try!'\n          })}\n          name='title'\n          mb={3}\n        />\n\n        <Label htmlFor='description'>Comment</Label>\n        <Textarea\n          name='description'\n          rows='6'\n          mb={3}\n          ref={register({\n            validate: value => value !== 'admin' || 'Nice try!'\n          })}\n          name='description'\n        />\n        {/*         \n\n        <Label htmlFor='sound'>Sound</Label>\n        <Select name='sound' mb={3}>\n          <option>Beep</option>\n          <option>Boop</option>\n          <option>Blip</option>\n        </Select>\n       <Flex mb={3}>\n          <Label>\n            <Radio name='letter' /> Alpha\n          </Label>\n          <Label>\n            <Radio name='letter' /> Bravo\n          </Label>\n          <Label>\n            <Radio name='letter' /> Charlie\n          </Label>\n        </Flex>\n        <Label>Slider</Label>\n        <Slider mb={3} /> */}\n        <Button>Submit</Button>\n      </Box>\n    </Box>\n  )\n}\nexport default AddProject\n","//import { gql } from '@apollo/react-hooks'\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst FETCH_PROJECTS = gql`\n  {\n    myProjects {\n      title\n    }\n  }\n`\nconst ADD_PROJECT = gql`\n  mutation($title: String!, $description: String!) {\n    addProject(project: { title: $title, description: $description }) {\n      title\n      description\n    }\n  }\n`\n\nconst ADD_PROJECT_SIMPLE = gql`\n  mutation($title: String!, $description: String!) {\n    addProjectSimple(title: $title, description: $description) {\n      title\n      description\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { Grid, Box } from 'theme-ui'\nimport { Heading } from 'theme-ui'\nimport {\n  gql,\n  useQuery,\n  useMutation,\n  useSubscription\n} from '@apollo/react-hooks'\nimport ApolloClient from 'apollo-boost'\n\nimport Layout from '../components/layout'\nimport Image from '../components/image'\nimport SEO from '../components/seo'\nimport ProjectListing from '../components/projectListing'\n\nimport AddProject from '../components/AddProject'\nimport {\n  FETCH_PROJECTS,\n  ADD_PROJECT,\n  ADD_PROJECT_SIMPLE\n} from '../apollo/gql/projects'\n\nconst AddProjectPage = () => {\n  const { loading, error, data, subscribeToMore } = useQuery(FETCH_PROJECTS)\n\n  //const [addProject] = useMutation(ADD_PROJECT)\n  const [addProjectSimple, x] = useMutation(ADD_PROJECT_SIMPLE)\n  const [addProject, y] = useMutation(ADD_PROJECT)\n\n  if (loading || !data) {\n    return <h1>loading...</h1>\n  }\n\n  return (\n    <Layout>\n      <div\n        sx={{\n          // applies width 100% to all viewport widths,\n          // width 50% above the first breakpoint,\n          // and 25% above the next breakpoint\n          width: ['100%', '50%', '25%']\n        }}\n      >\n        <SEO title='Home' />\n        <Heading as='h1'>Giveth</Heading>\n        <Heading as='h3'>The future of giving</Heading>\n        <br />\n        <br />\n        <Grid width={[128, null, 192]}>\n          <AddProject\n            addProject={async values => {\n              // addProject({\n              //   variables: { title: values.title, description: values.description }\n              // })\n              const project = await addProjectSimple({\n                variables: {\n                  title: values.title,\n                  description: values.description\n                },\n                refetchQueries: [{ query: FETCH_PROJECTS }]\n              })\n              console.log(`project A : ${JSON.stringify(project, null, 2)}`)\n            }}\n          />\n\n          <ProjectListing\n            name='Giveth DAC'\n            image='https://feathers.beta.giveth.io/uploads/368b8ef30b9326adc4a490c4506189f905cdacef63b999f9b042a853ab12a5bb.png'\n          />\n          <ProjectListing\n            name='Aragon DAC'\n            image='https://feathers.beta.giveth.io/uploads/3aa88b6ed3a6e0f54542086886194696a21c06b756864b97a1c1a0dcf58d4e17.png'\n          />\n          <ProjectListing\n            name='OSBE DAC'\n            image='https://ipfs.giveth.io/ipfs/QmUCepVMUhCHhZ5mSEXqWgL3taxPU5gaUhczTZgA4JLyPk'\n          />\n          <ProjectListing\n            name='Unicorn DAC'\n            image='https://feathers.beta.giveth.io/uploads/5906e1be14c47c0a18b44a29fe8873ddfb6440a8a212cf42bacb84b7e2e1c0c1.png'\n          />\n        </Grid>\n      </div>\n    </Layout>\n  )\n}\n\nexport default AddProjectPage\n"],"sourceRoot":""}